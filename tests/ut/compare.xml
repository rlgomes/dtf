<?xml version="1.0" encoding="UTF-8"?>

<script xmlns="http://dtf.org/v1" name="compare">
    <info>
        <author>
            <name>Rodney Gomes</name>
            <email>rlgomes@yahoo-inc.com</email>
        </author>
        <description>Unit test for the compare tag.</description>
    </info>
   
    <local>
    	<createstorage id="OUTPUT" path="${dtf.xml.path}/output"/>
        <createstorage id="INPUT" path="${dtf.xml.path}/input"/>

        <loadproperties uri="storage://INPUT/ut.properties"/>
        
        <import uri="storage://INPUT/perfutil.xml"/>
    </local>

    <record uri="storage://OUTPUT/compare_write_data.txt">
        <for property="i" range="1..${iterations.medium}">
            <event name="write.event">
                <attribute name="recordid" value="${i}"/>
                <attribute name="timestamp" value="${dtf.timestamp}"/>
                <attribute name="datestamp" value="${dtf.datestamp}"/>
                <attribute name="uid" value="${dtf.stream(random,16,${i})}"/>
                <attribute name="gid" value="${dtf.stream(random,16,${i})}"/>
                <attribute name="data" value="${i}${i}"/>
            </event>
        </for>
    </record> 
    
    <record uri="storage://OUTPUT/compare_read_data.txt">
        <for property="i" range="1..${iterations.medium}">
            <event name="read.event">
                <attribute name="recordid" value="${i}"/>
                <attribute name="timestamp" value="${dtf.timestamp}"/>
                <attribute name="datestamp" value="${dtf.datestamp}"/>
                <attribute name="uid" value="${dtf.stream(random,16,${i})}"/>
                <attribute name="gid" value="${dtf.stream(random,16,${i})}"/>
                <attribute name="data" value="${i}${i}"/>
            </event>
        </for>
    </record> 
     
    <log>Start comparing data</log>
    <event name="total">
	    <compare>
	         <query uri="storage://OUTPUT/compare_write_data.txt"
	                event="write.event"
	                cursor="c1">
                <select>
                    <field name="recordid"/>
                    <field name="data"/>
                </select>
             </query>
	                
	         <query uri="storage://OUTPUT/compare_read_data.txt"
	                event="read.event"
	                cursor="c2">
                <select>
                    <field name="recordid"/>
                    <field name="data"/>
                </select>
             </query>
             
             <where>
                <eq op1="${c1.recordid}" op2="${c2.recordid}"/>
             </where>
	        
	         <validate>
	            <assert>
	                <eq op1="${c1.data}" op2="${c2.data}"/>
	            </assert>
	         </validate>
	    </compare>
    </event>
    <log>Done comparing data</log>
   
    <call function="calcEventPerf" result="avg_occ">
        <property name="iterations" value="${iterations.medium}" />
        <property name="event" value="total" /> 
    </call>
    <log>Compared ${avg_occ} events/s with sequential events.</log>

    <record uri="storage://OUTPUT/compare_write_data.txt">
        <for property="i" range="${iterations.small}..1">
            <event name="write.event">
                <attribute name="recordid" value="${i}"/>
                <attribute name="timestamp" value="${dtf.timestamp}"/>
                <attribute name="datestamp" value="${dtf.datestamp}"/>
                <attribute name="uid" value="${dtf.stream(random,16,${i})}"/>
                <attribute name="gid" value="${dtf.stream(random,16,${i})}"/>
                <attribute name="data" value="${i}${i}"/>
            </event>
        </for>
    </record> 
    
    <record uri="storage://OUTPUT/compare_read_data.txt">
        <for property="i" range="1..${iterations.small}">
            <event name="read.event">
                <attribute name="recordid" value="${i}"/>
                <attribute name="timestamp" value="${dtf.timestamp}"/>
                <attribute name="datestamp" value="${dtf.datestamp}"/>
                <attribute name="uid" value="${dtf.stream(random,16,${i})}"/>
                <attribute name="gid" value="${dtf.stream(random,16,${i})}"/>
                <attribute name="data" value="${i}${i}"/>
            </event>
        </for>
    </record> 
     
    <log>Start comparing data</log>
    <event name="total">
        <compare>
             <query uri="storage://OUTPUT/compare_write_data.txt"
                    event="write.event"
                    cursor="c1">
                <select>
                    <field name="recordid"/>
                    <field name="data"/>
                </select>
             </query>
                    
             <query uri="storage://OUTPUT/compare_read_data.txt"
                    event="read.event"
                    cursor="c2">
                <select>
                    <field name="recordid"/>
                    <field name="data"/>
                </select>
             </query>
             
             <where>
                <eq op1="${c1.recordid}" op2="${c2.recordid}"/>
             </where>
            
             <validate>
                <assert>
                    <eq op1="${c1.data}" op2="${c2.data}"/>
                </assert>
             </validate>
        </compare>
    </event>
    <log>Done comparing data</log>
   
    <call function="calcEventPerf" result="avg_occ">
        <property name="iterations" value="${iterations.small}" />
        <property name="event" value="total" /> 
    </call>
    <log>Compared ${avg_occ} events/s with non sequential events.</log>

    <property name="threads" value="3"/> 
    <record uri="storage://OUTPUT/compare_write_data.txt">
        <parallelloop property="t" range="1..${threads}">
	        <for property="i" range="1..${iterations.medium}">
	            <event name="write.event">
	                <attribute name="recordid" value="${i}"/>
	                <attribute name="thread"   value="${t}"/>
	                <attribute name="data"     value="${i}${t}"/>
	            </event>
	        </for>
        </parallelloop>
    </record> 
    
    <record uri="storage://OUTPUT/compare_read_data.txt">
        <parallelloop property="t" range="1..${threads}">
	        <for property="i" range="1..${iterations.medium}">
	            <event name="read.event">
	                <attribute name="recordid" value="${i}"/>
	                <attribute name="thread"   value="${t}"/>
	                <attribute name="data"     value="${i}${t}"/>
	            </event>
	        </for>
        </parallelloop>
    </record> 
     
    <event name="total">
        <parallelloop property="t" range="1..${threads}">
	        <compare>
	             <query uri="storage://OUTPUT/compare_write_data.txt"
	                    event="write.event"
	                    cursor="c1-${t}">
                    <where>
                        <eq op1="thread" op2="${t}"/>
                    </where>
                 </query>
	                    
	             <query uri="storage://OUTPUT/compare_read_data.txt"
	                    event="read.event"
	                    cursor="c2-${t}"/>
	             
	             <where>
	                <and>
		                <eq op1="${c1-${t}.recordid}" op2="${c2-${t}.recordid}"/>
		                <eq op1="${c1-${t}.thread}" op2="${c2-${t}.thread}"/>
	                </and>
	             </where>
	            
	             <validate>
	                <assert>
	                    <eq op1="${c1-${t}.data}" op2="${c2-${t}.data}"/>
	                </assert>
	             </validate>
	        </compare>
        </parallelloop>
    </event>
  
    <multiply op1="${iterations.medium}" op2="${threads}" result="iterations"/>
    <call function="calcEventPerf" result="avg_occ">
        <property name="iterations" value="${iterations}" />
        <property name="event" value="total" /> 
    </call>
    <log>Compared ${avg_occ} events/s with multi-threaded compares</log>
    
    <record uri="storage://OUTPUT/compare_read_data.txt">
        <for property="i" range="1..${iterations.medium}">
            <event name="read.event">
                <attribute name="recordid" value="${i}"/>
                <attribute name="data" value="${dtf.stream(random,16,${i})}"/>
            </event>
        </for>
    </record> 
     
    <log>Start comparing data</log>
    <event name="total">
        <compare>
             <query uri="storage://OUTPUT/compare_read_data.txt"
                    event="read.event"
                    cursor="c1"/>
                    
             <validate>
                <assert>
                    <eq op1="${c1.data}"
                        op2="${dtf.stream(random,16,${c1.recordid})}"/>
                </assert>
             </validate>
        </compare>
    </event>
    <log>Done comparing data</log>

    <call function="calcEventPerf" result="avg_occ">
        <property name="iterations" value="${iterations.medium}" />
        <property name="event" value="total" /> 
    </call>
    <log>Compared ${avg_occ} events/s with single query</log>

    <record uri="storage://OUTPUT/read_data.txt">
        <for property="i" range="1..${iterations.tiny}">
            <event name="read.event">
                <attribute name="recordid" value="${i}"/>
                <attribute name="data" value="${dtf.stream(random,16,${i})}"/>
            </event>
        </for>
    </record> 

    <log>Start comparing with bad data</log>
    <event name="total">
        <compare>
             <query uri="storage://OUTPUT/read_data.txt"
                    event="read.event"
                    cursor="c1"/>
                    
             <validate>
                <if>
                    <neq op1="${c1.data}" op2="BAD DATA"/>
                    <then>
                        <log>Failed as expected!</log>
                    </then>
                </if>
             </validate>
        </compare>
    </event>
    <log>Done comparing with bad data</log>
    
    <record uri="storage://OUTPUT/loop_data.txt">
        <for property="i" range="1..${iterations.tiny}">
            <event name="read.event">
                <attribute name="recordid" value="${i}"/>
                <attribute name="data" value="${dtf.stream(random,16,${i})}"/>
            </event>
        </for>
    </record> 

    <log>Start comparing with bad data</log>
    <event name="total">
        <compare>
             <query uri="storage://OUTPUT/read_data.txt"
                    event="read.event"
                    cursor="c1"/>
                    
             <validate>
                <assert><neq op1="${c1.data}" op2="BAD DATA"/></assert>
             </validate>
        </compare>
    </event>
    <log>Done comparing with bad data</log>

    <try>
	    <compare>
	         <query uri="storage://OUTPUT/read_data.txt"
	                event="read.event"
	                cursor="c1"/>
	                    
	         <query uri="storage://OUTPUT/read_data.txt"
	                event="read.event"
	                cursor="c2"/>
	             
	         <where>
	            <eq op1="YYY" op2="XXX"/>
	         </where>
	            
	         <validate>
	            <fail>
	            Shouldn't reach this because the previous should result in the 
	            inability to find any events that match and throw an exception 
	            stating thata
	            </fail>
	         </validate>
	    </compare> 
        <catch exception="${dtf.DTFException}" property="message">
            <log>Caught exception correctly [${message}]</log>     
        </catch>
    </try> 

</script>