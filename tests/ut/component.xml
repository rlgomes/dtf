<?xml version="1.0" encoding="UTF-8"?>
<script xmlns="http://dtf.org/v1" name="component">
    <info>
         <author>
             <name>Rodney Gomes</name>
             <email>rlgomes@yahoo-inc.com</email>
         </author> 
         <description>
             Test the basic functionality of the component tag which is used to
             execute remote tasks on remote components in the DTF architecture.
         </description>
    </info>
    
    <local>
        <createstorage id="INPUT" path="${dtf.xml.path}/input"/>
        <createstorage id="OUTPUT" path="${dtf.xml.path}/output"/>
        
        <loadproperties uri="storage://INPUT/ut.properties"/>
    </local>

    <for property="iteration" range="[0..${iterations.tiny}]">
        <sequence>
            <local>
                <echo>Iteration ${iteration}: Locking and Unlocking one DTFA</echo>
                <lockcomponent id="DTFA1" timeout="10s"/>
                <unlockcomponent id="DTFA1"/>
            </local>
        </sequence>
    </for>
    
    <try>
        <sequence>
            <local>
                <echo>About to lock a dtfa by name and this will fail.</echo>
                <lockcomponent id="DTFA2" timeout="0">
                	<attrib name="name" value="INEXISTENT"/>
                </lockcomponent>
                <fail message="The previous lockcomponent should have failed."/>
            </local>
        </sequence>
        <catch exception="${dtf.LockException}">
            <sequence>
                <local>
                    <echo>Caught the exception correctly</echo>
                </local>
            </sequence>
        </catch>
    </try>
  
    <local>
        <lockcomponent id="DTFA1" timeout="60s"/>
    </local>

    <log>Remotely executing an echo on the locked agent DTFA1</log>
    <component id="DTFA1">
        <echo>***********************************</echo>
        <echo>This is being printed from the dtfx</echo>
        <echo>***********************************</echo>
    </component>
    
    <component id="DTFA1">
        <echo>********************************************</echo>
        <echo>Echo property on component: ${dtf.node.name}</echo>
        <echo>********************************************</echo>
    </component>

    <log>
    Make sure parallel threads executing on the same component do not 
    accidentally share state.
    </log>
    <record uri="storage://OUTPUT/remote_events_checked.txt"> 
	    <parallelloop property="thread" range="1..5">
	        <for property="i" range="1..${iterations.tiny}">
	            <component id="DTFA1">
	                <event name="agent.remote_event">
	                    <attribute name="thread" value="${thread}"/>
                        <attribute name="iteration" value="${i}"/>
	                </event>
	            </component>
	        </for>
	    </parallelloop> 
    </record>
   
    <for property="thread" range="1..5"> 
	    <query uri="storage://OUTPUT/remote_events_checked.txt" 
	           cursor="cursor">
	        <where>
	            <eq op1="thread" op2="${thread}"/>
	        </where>
	    </query>
        
        <property name="count" value="0" overwrite="true"/>
        <iterate cursor="cursor">
            <add op1="${count}" op2="1" result="count"/>
        </iterate>
        
        <if>
            <neq op1="${count}" op2="${iterations.tiny}"/>
            <then>
                <fail>
                Count mismatch  for thread ${thread}
                expected ${iterations.small} got ${count}
                </fail>
            </then>
        </if>
    </for>
    
    <!-- negative -->
    <try> 
	    <component id="inexistent">
	    </component>
        <catch exception="${dtf.DTFException}" property="message">
            <log>Caught: ${message}</log>
        </catch>
    </try>

    <function name="badfunction" export="true">
        <fail>On Purpose</fail>
    </function>
    
    <try> 
	    <component id="DTFA1">
            <call function="badfunction"/>
	    </component>
        <catch exception="${dtf.DTFException}" property="message">
            <sequence>
	            <log>Caught: ${message}</log>
	            <assert>
	                <match source="${message}"
	                       expression=".* on component \[DTFA1\]"/>
	            </assert>
            </sequence>
        </catch>
    </try>
    
</script>
