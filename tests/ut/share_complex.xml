<?xml version="1.0" encoding="UTF-8"?>

<script xmlns="http://dtf.org/v1" name="share_complex">
    <info>
        <author>
            <name>Rodney Gomes</name>
            <email>rlgomes@yahoo-inc.com</email>
        </author>
        <description>
        Complex scenarios using multiple agents and shares to exchange data 
        between them. Validates that creation of the shares always happens local
        to the component who created it but distributed shared to others to be
        able to set and get from that same share.
        </description>
    </info>
   
    <local>
    	<createstorage id="OUTPUT" path="${dtf.xml.path}/output"/>
        <createstorage id="INPUT" path="${dtf.xml.path}/input"/>

        <loadproperties uri="storage://INPUT/ut.properties"/>
    </local>

    <local> 
        <lockgroup>
		    <lockcomponent id="C1"/>
		    <lockcomponent id="C2"/>
        </lockgroup>
    </local>
    
    <property name="acc" value="0"/> 
    <for property="i" range="1..5"> 
	    <parallel>
	        <component id="C1">
	            <event name="create_share">
	                <share_create id="C1_SHARE" type="cumulative"/>
	            </event>
	            <subtract op1="${create_share.stop}"
	                      op2="${create_share.start}"
	                      result="create_time"/> 
	            <share_set id="C1_SHARE">
	                <property name="create" value="${create_time}"/>
	            </share_set>
	        </component> 
	    </parallel>
        
        <share_wait id="C1_SHARE"/>
        <share_get id="C1_SHARE" blocking="true"/>
        <share_destroy id="C1_SHARE"/>
        <add op1="${acc}" op2="${create}" result="acc"/>
    </for>
    <divide op1="${acc}" op2="10" result="duration"/>
    <assert><lt op1="${duration}" op2="50"/></assert>
    
    <!-- multiple writers and multiple readers on a share of the type queue -->
    <share_create id="SHARE1" type="queue"/>
    <parallel>
        <component id="C1">
	        <parallelloop property="thread" range="1..${threads}">
	            <share_set id="SHARE1">
	                <property name="set.thread"
                              value="${thread}"
                              overwrite="true"/>
	            </share_set>
	        </parallelloop>
        </component>
        <parallelloop property="thread" range="1..${threads}">
            <share_get id="SHARE1" blocking="true"/>
            <event name="setter">
                <attribute name="thread" value="${set.thread}"/>
            </event>
        </parallelloop>
    </parallel>

    <!-- create the share point on the runner then have 1 component set a 
         bunch of data and another do all the gets -->
    <share_create id="SP1" type="queue"/>
    <parallelloop property="t" range="1..5">
        <component id="C1">
            <share_wait id="SP1"/>
            <share_set id="SP1">
                <property name="caca"/>
            </share_set>
        </component>
    </parallelloop>
    <parallelloop property="t" range="1..5">
        <component id="C2">
            <share_get id="SP1" blocking="true"/>
        </component>
    </parallelloop>
    <share_destroy id="SP1"/>
   
    <!-- one producer to share with one consumer and the share point is 
         created on one of the components --> 
    <parallel>
        <component id="C1">
            <share_create id="SP1"/>
        </component>
        <component id="C2">
            <share_wait id="SP1" timeout="5s"/>
        </component>
    </parallel>
    <share_destroy id="SP1"/>

</script> 